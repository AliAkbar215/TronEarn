{"ast":null,"code":"import { toast } from \"react-toastify\";\nimport { environment } from \"../../environment\";\nexport const RegisterAction = referrerAddress => async (dispatch, state) => {\n  const {\n    contract,\n    userWalletAddress,\n    tronWeb\n  } = state().UserReducer;\n  let getRefAddress = localStorage.getItem(\"TRON_EARN_REF\");\n  let getDirectFromUrl;\n  let url = window.location.href;\n\n  if (url.includes(\"?ref=\")) {\n    let getAddress = url.split(\"?ref=\")[1];\n    let final = getAddress.slice(0, 1);\n    getDirectFromUrl = final;\n  }\n\n  if (userWalletAddress) {\n    contract.register(getDirectFromUrl ? getDirectFromUrl : getRefAddress ? getRefAddress : 1).send({\n      feeLimit: 100000000,\n      callValue: state().UserReducer.tronWeb.toSun(900)\n    }).then(() => {\n      toast.success(\"registered successfully!\");\n    }).catch(err => {\n      toast.error(\"something went wrong!\");\n    });\n  } // if (userWalletAddress) {\n  //   await state()\n  //     .UserReducer.contract.getStationInfo(\n  //       state().UserReducer.userWalletAddress,\n  //       1\n  //     )\n  //     .call()\n  //     .then(async (val) => {\n  //       if (val[0]) {\n  //         toast.error(\"user already exist please do autoLogin!\");\n  //       } else {\n  //         await state()\n  //           .UserReducer.contract.Level1(\n  //             getDirectFromUrl\n  //               ? getDirectFromUrl\n  //               : getRefAddress\n  //               ? getRefAddress\n  //               : environment.defaultRefAddress\n  //           )\n  //           .send({\n  //             feeLimit: 100_000_000,\n  //             callValue: state().UserReducer.tronWeb.toSun(900),\n  //           })\n  //           .then(async (val) => {\n  //             toast.success(\"confirmed please try to autologin\");\n  //           });\n  //       }\n  //     })\n  //     .catch((err) => {\n  //       toast.error(\"something went wrong!\");\n  //     });\n  // }\n\n};\nexport const AutoLoginAction = () => async (dispatch, state) => {\n  // console.log(\"clicked\",state().UserReducer.userWalletAddress);\n  if (state().UserReducer.userWalletAddress) {\n    await state().UserReducer.contract.getStationInfo(state().UserReducer.userWalletAddress, 1).call().then(async val => {\n      if (val[0]) {\n        dispatch({\n          type: \"USER_AUTHENTICATED\"\n        });\n      } else {\n        toast.error(\"user not found please do register!\");\n      }\n\n      localStorage.setItem(\"isAuth\", val[0]);\n    }).catch(err => {\n      toast.error(\"something went wrong!\");\n    });\n  }\n};\nexport const ViewAction = id => async (dispatch, state) => {\n  const {\n    contract,\n    userWalletAddress,\n    tronWeb\n  } = state().UserReducer;\n  contract.idtoaddress(id).call().then(val => {\n    if (tronWeb.address.fromHex(val) != \"T9yD14Nj9j7xAB4dbGeiX9h8unkKHxuWwb\") {\n      dispatch({\n        type: \"USER_WALLET_ADDRESS\",\n        payload: tronWeb.address.fromHex(val)\n      });\n      dispatch({\n        type: \"USER_AUTHENTICATED\"\n      });\n      dispatch({\n        type: \"CLICKED_FOR_VIEW\"\n      });\n      localStorage.setItem(\"isAuth\", true);\n      localStorage.setItem(\"clickedForView\", tronWeb.address.fromHex(val));\n    } // console.log(\"here is the value\", tronWeb.address.fromHex(val));\n\n  });\n};\nexport const CheckCurrentUser = (defaultAddress, tronweb, auth) => async (dispatch) => {\n  tronweb.contract().at(environment.contractAddress).then(async contract => {\n    // let getT = tronweb.trx\n    //   .getTransactionInfo(\n    //     \"9ec68aba8c082c61173cbfb8bbf4582afa15d086b50b6f45a81e7689ab303722\"\n    //   )\n    //   .then((val) => {\n    //     console.log(\"here we go===========>\", val);\n    //   });\n    // console.log(\"================>\", getT);\n    contract.getStationInfo(defaultAddress, 1).call().then(val => {\n      if (val[0]) {\n        dispatch({\n          type: \"AUTH\",\n          payload: auth\n        });\n      } else {\n        dispatch({\n          type: \"AUTH_FAILED\"\n        });\n      }\n    });\n  });\n};\nconst binaryTree = {\n  name: \"\",\n  children: [{\n    name: \"\",\n    children: [{\n      name: \"\"\n    }, {\n      name: \"\"\n    }]\n  }, {\n    name: \"\",\n    children: [{\n      name: \"\"\n    }, {\n      name: \"\"\n    }]\n  }]\n};\nexport const UserDataAction = (defaultAddress, tronweb) => async dispatch => {\n  // console.log(\"called\", auth);\n  if (defaultAddress) {\n    tronweb.contract().at(environment.contractAddress).then(async contract => {\n      //user wallet address\n      dispatch({\n        type: \"USER_WALLET_ADDRESS\",\n        payload: defaultAddress\n      });\n      let DownLinde = [];\n      contract.getdirects(defaultAddress).call().then(async val => {\n        // console.log(\"this is  getdirects\");\n        dispatch({\n          type: \"DOWNLINE_COUNT\",\n          payload: val.arr\n        }); //binary tree\n\n        await contract.users(defaultAddress).call().then(val => {\n          binaryTree.name = val.registrationid.toNumber();\n        });\n\n        if (val.arr.length) {\n          for (let a = 1; a >= 0; a--) {\n            // console.log(\"=====>\",a);\n            let cond = a === 1 ? 0 : 1; // console.log(cond);\n\n            if (val.arr[cond]) {\n              await contract.users(tronweb.address.fromHex(val.arr[cond])).call().then(user => {\n                binaryTree.children[a].name = user.registrationid.toNumber();\n              });\n            }\n\n            if (val.arr.length) {\n              await contract.getdirects(tronweb.address.fromHex(val.arr[1])).call().then(async value => {\n                if (value.arr[a]) {\n                  await contract.users(tronweb.address.fromHex(value.arr[a])).call().then(user => {\n                    binaryTree.children[0].children[cond].name = user.registrationid.toNumber();\n                  });\n                }\n              });\n\n              if (val.arr[0]) {\n                await contract.getdirects(tronweb.address.fromHex(val.arr[0])).call().then(async value => {\n                  if (value.arr[a]) {\n                    await contract.users(tronweb.address.fromHex(value.arr[a])).call().then(user => {\n                      binaryTree.children[1].children[cond].name = user.registrationid.toNumber();\n                    });\n                  }\n                });\n              }\n            }\n          }\n        }\n\n        dispatch({\n          type: \"BINARY_TREE\",\n          payload: binaryTree\n        }); // console.log(\"=====>\",binaryTree);\n      });\n      contract.users(defaultAddress).call().then(val => {\n        dispatch({\n          type: \"WITHDRAW_ABLE\",\n          payload: tronweb.fromSun(val.withdrawable)\n        });\n        dispatch({\n          type: \"USERS_ID\",\n          payload: val.registrationid.toNumber()\n        });\n        dispatch({\n          type: \"USERS_ID_FOR_INCOME\",\n          payload: val.registrationid.toNumber()\n        });\n        dispatch({\n          type: \"LEVEL_REWARD\",\n          payload: tronweb.fromSun(val.LevelReward)\n        });\n        dispatch({\n          type: \"MATRIX_INCOME\",\n          payload: tronweb.fromSun(val.MatrixReward)\n        });\n        dispatch({\n          type: \"DIRECT_REFERRALS\",\n          payload: val.referredUsers.toNumber()\n        });\n        dispatch({\n          type: \"LEVEL_INCOME\",\n          payload: tronweb.fromSun(val.LevelReward)\n        });\n        dispatch({\n          type: \"DIRECT_INCOME\",\n          payload: tronweb.fromSun(val.getdirects)\n        });\n        dispatch({\n          type: \"\",\n          payload: tronweb.fromSun(val.getdirects)\n        });\n      }); //contract\n\n      dispatch({\n        type: \"CONTRACT\",\n        payload: contract\n      }); //tronweb\n\n      dispatch({\n        type: \"TRONWEB\",\n        payload: tronweb\n      }); // business stations\n\n      for (let i = 1; i <= 7; i++) {\n        await contract.getStationInfo(defaultAddress, i).call().then(val => {\n          dispatch({\n            type: `STATION_${i}`,\n            payload: val[0]\n          });\n        });\n      } //smart matrix\n      //smart level 1\n\n\n      await contract.getStationInfo(defaultAddress, 8).call().then(val => {\n        dispatch({\n          type: \"SMART_MATRIX_LEVEL_ONE\",\n          payload: val[0]\n        });\n      }); //smart level 2\n\n      await contract.getStationInfo(defaultAddress, 9).call().then(val => {\n        dispatch({\n          type: \"SMART_MATRIX_LEVEL_TWO\",\n          payload: val[0]\n        });\n      }); //silver matrix\n      //sliver level 1\n\n      await contract.getStationInfo(defaultAddress, 10).call().then(val => {\n        dispatch({\n          type: \"SILVER_MATRIX_LEVEL_ONE\",\n          payload: val[0]\n        });\n      }); //silver level 2\n\n      await contract.getStationInfo(defaultAddress, 11).call().then(val => {\n        dispatch({\n          type: \"SILVER_MATRIX_LEVEL_TWO\",\n          payload: val[0]\n        });\n      }); // gold matrix\n      //gold level 1\n\n      await contract.getStationInfo(defaultAddress, 12).call().then(val => {\n        dispatch({\n          type: \"GOLD_MATRIX_LEVEL_ONE\",\n          payload: val[0]\n        });\n      }); //gold level 2\n\n      await contract.getStationInfo(defaultAddress, 13).call().then(val => {\n        dispatch({\n          type: \"GOLD_MATRIX_LEVEL_TWO\",\n          payload: val[0]\n        });\n      }); // Royal matrix\n      //Royal level 1\n\n      await contract.getStationInfo(defaultAddress, 14).call().then(val => {\n        dispatch({\n          type: \"ROYAL_MATRIX_LEVEL_ONE\",\n          payload: val[0]\n        });\n      }); //Royal level 2\n\n      await contract.getStationInfo(defaultAddress, 15).call().then(val => {\n        dispatch({\n          type: \"ROYAL_MATRIX_LEVEL_TWO\",\n          payload: val[0]\n        });\n      }); // Crown matrix\n      //Crown level 1\n\n      await contract.getStationInfo(defaultAddress, 16).call().then(val => {\n        dispatch({\n          type: \"CROWN_MATRIX_LEVEL_ONE\",\n          payload: val[0]\n        });\n      }); //Crown level 2\n\n      await contract.getStationInfo(defaultAddress, 17).call().then(val => {\n        dispatch({\n          type: \"CROWN_MATRIX_LEVEL_TWO\",\n          payload: val[0]\n        });\n      });\n    });\n  }\n};\nexport const smartMatrixAction = () => async (dispatch, state) => {\n  const {\n    contract,\n    userWalletAddress,\n    tronWeb\n  } = state().UserReducer;\n  await contract.SMARTMATRIX(userWalletAddress).send({\n    feeLimit: 100000000,\n    callValue: state().UserReducer.tronWeb.toSun(5000)\n  }).then(() => {\n    dispatch(UserDataAction(tronWeb.defaultAddress.base58, tronWeb));\n  });\n};\nexport const smartMatrixLevel2Action = () => async (dispatch, state) => {\n  const {\n    contract,\n    userWalletAddress,\n    tronWeb\n  } = state().UserReducer;\n  await contract.SMARTMATRIX2(userWalletAddress).send({\n    feeLimit: 100000000,\n    callValue: state().UserReducer.tronWeb.toSun(10000)\n  }).then(() => {\n    dispatch(UserDataAction(tronWeb.defaultAddress.base58, tronWeb));\n  });\n};\nexport const silverMatrixAction = () => async (dispatch, state) => {\n  const {\n    contract,\n    userWalletAddress,\n    tronWeb\n  } = state().UserReducer;\n  await contract.SILVERMATRIX(userWalletAddress).send({\n    feeLimit: 100000000,\n    callValue: state().UserReducer.tronWeb.toSun(50000)\n  }).then(() => {\n    dispatch(UserDataAction(tronWeb.defaultAddress.base58, tronWeb));\n  });\n};\nexport const silverMatrixLevel2Action = () => async (dispatch, state) => {\n  const {\n    contract,\n    userWalletAddress,\n    tronWeb\n  } = state().UserReducer;\n  await contract.SILVERMATRIX2(userWalletAddress).send({\n    feeLimit: 100000000,\n    callValue: state().UserReducer.tronWeb.toSun(100000)\n  }).then(() => {\n    dispatch(UserDataAction(tronWeb.defaultAddress.base58, tronWeb));\n  });\n};\nexport const goldMatrixAction = () => async (dispatch, state) => {\n  const {\n    contract,\n    userWalletAddress,\n    tronWeb\n  } = state().UserReducer;\n  await contract.GOLDMATRIX(userWalletAddress).send({\n    feeLimit: 100000000,\n    callValue: state().UserReducer.tronWeb.toSun(100000)\n  }).then(() => {\n    dispatch(UserDataAction(tronWeb.defaultAddress.base58, tronWeb));\n  });\n};\nexport const goldMatrixLevel2Action = () => async (dispatch, state) => {\n  const {\n    contract,\n    userWalletAddress,\n    tronWeb\n  } = state().UserReducer;\n  await contract.GOLDMATRIX2(userWalletAddress).send({\n    feeLimit: 100000000,\n    callValue: state().UserReducer.tronWeb.toSun(200000)\n  }).then(() => {\n    dispatch(UserDataAction(tronWeb.defaultAddress.base58, tronWeb));\n  });\n};\nexport const royalMatrixAction = () => async (dispatch, state) => {\n  const {\n    contract,\n    userWalletAddress,\n    tronWeb\n  } = state().UserReducer;\n  await contract.ROYALMATRIX(userWalletAddress).send({\n    feeLimit: 100000000,\n    callValue: state().UserReducer.tronWeb.toSun(500000)\n  }).then(() => {\n    dispatch(UserDataAction(tronWeb.defaultAddress.base58, tronWeb));\n  });\n};\nexport const royalMatrixLevel2Action = () => async (dispatch, state) => {\n  const {\n    contract,\n    userWalletAddress,\n    tronWeb\n  } = state().UserReducer;\n  await contract.ROYALMATRIX2(userWalletAddress).send({\n    feeLimit: 100000000,\n    callValue: state().UserReducer.tronWeb.toSun(1000000)\n  }).then(() => {\n    dispatch(UserDataAction(tronWeb.defaultAddress.base58, tronWeb));\n  });\n};\nexport const crownMatrixAction = () => async (dispatch, state) => {\n  const {\n    contract,\n    userWalletAddress,\n    tronWeb\n  } = state().UserReducer;\n  await contract.CROWNMATRIX(userWalletAddress).send({\n    feeLimit: 100000000,\n    callValue: state().UserReducer.tronWeb.toSun(5000000)\n  }).then(() => {\n    dispatch(UserDataAction(tronWeb.defaultAddress.base58, tronWeb));\n  });\n};\nexport const crownMatrixLevel2Action = () => async (dispatch, state) => {\n  const {\n    contract,\n    userWalletAddress,\n    tronWeb\n  } = state().UserReducer;\n  await contract.CROWNMATRIX2(userWalletAddress).send({\n    feeLimit: 100000000,\n    callValue: state().UserReducer.tronWeb.toSun(10000000)\n  }).then(() => {\n    dispatch(UserDataAction(tronWeb.defaultAddress.base58, tronWeb));\n  });\n};\nexport const LogoutAction = () => async dispatch => {\n  dispatch({\n    type: \"LOGOUT\"\n  });\n  localStorage.removeItem(\"isAuth\");\n  localStorage.removeItem(\"clickedForView\");\n  window.location.reload();\n};","map":{"version":3,"sources":["/home/hassan/blocTechProj/TRON_EARN/src/redux/actions/index.js"],"names":["toast","environment","RegisterAction","referrerAddress","dispatch","state","contract","userWalletAddress","tronWeb","UserReducer","getRefAddress","localStorage","getItem","getDirectFromUrl","url","window","location","href","includes","getAddress","split","final","slice","register","send","feeLimit","callValue","toSun","then","success","catch","err","error","AutoLoginAction","getStationInfo","call","val","type","setItem","ViewAction","id","idtoaddress","address","fromHex","payload","CheckCurrentUser","defaultAddress","tronweb","auth","at","contractAddress","binaryTree","name","children","UserDataAction","DownLinde","getdirects","arr","users","registrationid","toNumber","length","a","cond","user","value","fromSun","withdrawable","LevelReward","MatrixReward","referredUsers","i","smartMatrixAction","SMARTMATRIX","base58","smartMatrixLevel2Action","SMARTMATRIX2","silverMatrixAction","SILVERMATRIX","silverMatrixLevel2Action","SILVERMATRIX2","goldMatrixAction","GOLDMATRIX","goldMatrixLevel2Action","GOLDMATRIX2","royalMatrixAction","ROYALMATRIX","royalMatrixLevel2Action","ROYALMATRIX2","crownMatrixAction","CROWNMATRIX","crownMatrixLevel2Action","CROWNMATRIX2","LogoutAction","removeItem","reload"],"mappings":"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","sourcesContent":["import { toast } from \"react-toastify\";\nimport { environment } from \"../../environment\";\n\nexport const RegisterAction = (referrerAddress) => async (dispatch, state) => {\n  const { contract, userWalletAddress, tronWeb } = state().UserReducer;\n\n  let getRefAddress = localStorage.getItem(\"TRON_EARN_REF\");\n  let getDirectFromUrl;\n\n  let url = window.location.href;\n\n  if (url.includes(\"?ref=\")) {\n    let getAddress = url.split(\"?ref=\")[1];\n    let final = getAddress.slice(0, 1);\n    getDirectFromUrl = final;\n  }\n\n  if (userWalletAddress) {\n    contract\n      .register(\n        getDirectFromUrl ? getDirectFromUrl : getRefAddress ? getRefAddress : 1\n      )\n      .send({\n        feeLimit: 100_000_000,\n        callValue: state().UserReducer.tronWeb.toSun(900),\n      })\n      .then(() => {\n        toast.success(\"registered successfully!\");\n      })\n      .catch((err) => {\n        toast.error(\"something went wrong!\");\n      });\n  }\n\n  // if (userWalletAddress) {\n  //   await state()\n  //     .UserReducer.contract.getStationInfo(\n  //       state().UserReducer.userWalletAddress,\n  //       1\n  //     )\n  //     .call()\n  //     .then(async (val) => {\n  //       if (val[0]) {\n  //         toast.error(\"user already exist please do autoLogin!\");\n  //       } else {\n  //         await state()\n  //           .UserReducer.contract.Level1(\n  //             getDirectFromUrl\n  //               ? getDirectFromUrl\n  //               : getRefAddress\n  //               ? getRefAddress\n  //               : environment.defaultRefAddress\n  //           )\n  //           .send({\n  //             feeLimit: 100_000_000,\n  //             callValue: state().UserReducer.tronWeb.toSun(900),\n  //           })\n  //           .then(async (val) => {\n  //             toast.success(\"confirmed please try to autologin\");\n  //           });\n  //       }\n  //     })\n  //     .catch((err) => {\n  //       toast.error(\"something went wrong!\");\n  //     });\n  // }\n};\n\nexport const AutoLoginAction = () => async (dispatch, state) => {\n  // console.log(\"clicked\",state().UserReducer.userWalletAddress);\n  if (state().UserReducer.userWalletAddress) {\n    await state()\n      .UserReducer.contract.getStationInfo(\n        state().UserReducer.userWalletAddress,\n        1\n      )\n      .call()\n      .then(async (val) => {\n        if (val[0]) {\n          dispatch({\n            type: \"USER_AUTHENTICATED\",\n          });\n        } else {\n          toast.error(\"user not found please do register!\");\n        }\n        localStorage.setItem(\"isAuth\", val[0]);\n      })\n      .catch((err) => {\n        toast.error(\"something went wrong!\");\n      });\n  }\n};\n\nexport const ViewAction = (id) => async (dispatch, state) => {\n  const { contract, userWalletAddress, tronWeb } = state().UserReducer;\n\n  contract\n    .idtoaddress(id)\n    .call()\n    .then((val) => {\n      if (\n        tronWeb.address.fromHex(val) != \"T9yD14Nj9j7xAB4dbGeiX9h8unkKHxuWwb\"\n      ) {\n        dispatch({\n          type: \"USER_WALLET_ADDRESS\",\n          payload: tronWeb.address.fromHex(val),\n        });\n\n        dispatch({\n          type: \"USER_AUTHENTICATED\",\n        });\n        dispatch({\n          type: \"CLICKED_FOR_VIEW\",\n        });\n        localStorage.setItem(\"isAuth\", true);\n        localStorage.setItem(\"clickedForView\", tronWeb.address.fromHex(val));\n      }\n      // console.log(\"here is the value\", tronWeb.address.fromHex(val));\n    });\n};\n\nexport const CheckCurrentUser = (defaultAddress, tronweb, auth) => async (\n  dispatch\n) => {\n  tronweb\n    .contract()\n    .at(environment.contractAddress)\n    .then(async (contract) => {\n      // let getT = tronweb.trx\n      //   .getTransactionInfo(\n      //     \"9ec68aba8c082c61173cbfb8bbf4582afa15d086b50b6f45a81e7689ab303722\"\n      //   )\n      //   .then((val) => {\n      //     console.log(\"here we go===========>\", val);\n      //   });\n\n      // console.log(\"================>\", getT);\n\n      contract\n        .getStationInfo(defaultAddress, 1)\n        .call()\n        .then((val) => {\n          if (val[0]) {\n            dispatch({\n              type: \"AUTH\",\n              payload: auth,\n            });\n          } else {\n            dispatch({\n              type: \"AUTH_FAILED\",\n            });\n          }\n        });\n    });\n};\n\nconst binaryTree = {\n  name: \"\",\n  children: [\n    {\n      name: \"\",\n\n      children: [\n        {\n          name: \"\",\n        },\n        {\n          name: \"\",\n        },\n      ],\n    },\n    {\n      name: \"\",\n\n      children: [\n        {\n          name: \"\",\n        },\n        {\n          name: \"\",\n        },\n      ],\n    },\n  ],\n};\n\nexport const UserDataAction = (defaultAddress, tronweb) => async (dispatch) => {\n  // console.log(\"called\", auth);\n  if (defaultAddress) {\n    tronweb\n      .contract()\n      .at(environment.contractAddress)\n      .then(async (contract) => {\n        //user wallet address\n        dispatch({\n          type: \"USER_WALLET_ADDRESS\",\n          payload: defaultAddress,\n        });\n\n        let DownLinde = [];\n        contract\n          .getdirects(defaultAddress)\n          .call()\n          .then(async (val) => {\n            // console.log(\"this is  getdirects\");\n            dispatch({\n              type: \"DOWNLINE_COUNT\",\n              payload: val.arr,\n            });\n\n            //binary tree\n            await contract\n              .users(defaultAddress)\n              .call()\n              .then((val) => {\n                binaryTree.name = val.registrationid.toNumber();\n              });\n\n            if (val.arr.length) {\n              for (let a = 1; a >= 0; a--) {\n                // console.log(\"=====>\",a);\n                let cond = a === 1 ? 0 : 1;\n                // console.log(cond);\n                if (val.arr[cond]) {\n                  await contract\n                    .users(tronweb.address.fromHex(val.arr[cond]))\n                    .call()\n                    .then((user) => {\n                      binaryTree.children[\n                        a\n                      ].name = user.registrationid.toNumber();\n                    });\n                }\n\n                if (val.arr.length) {\n                  await contract\n                    .getdirects(tronweb.address.fromHex(val.arr[1]))\n                    .call()\n                    .then(async (value) => {\n                      if (value.arr[a]) {\n                        await contract\n                          .users(tronweb.address.fromHex(value.arr[a]))\n                          .call()\n                          .then((user) => {\n                            binaryTree.children[0].children[\n                              cond\n                            ].name = user.registrationid.toNumber();\n                          });\n                      }\n                    });\n\n                  if (val.arr[0]) {\n                    await contract\n                      .getdirects(tronweb.address.fromHex(val.arr[0]))\n                      .call()\n                      .then(async (value) => {\n                        if (value.arr[a]) {\n                          await contract\n                            .users(tronweb.address.fromHex(value.arr[a]))\n                            .call()\n                            .then((user) => {\n                              binaryTree.children[1].children[\n                                cond\n                              ].name = user.registrationid.toNumber();\n                            });\n                        }\n                      });\n                  }\n                }\n              }\n            }\n\n            dispatch({\n              type: \"BINARY_TREE\",\n              payload: binaryTree,\n            });\n\n            // console.log(\"=====>\",binaryTree);\n          });\n\n        contract\n          .users(defaultAddress)\n          .call()\n          .then((val) => {\n            dispatch({\n              type: \"WITHDRAW_ABLE\",\n              payload: tronweb.fromSun(val.withdrawable),\n            });\n\n            dispatch({\n              type: \"USERS_ID\",\n              payload: val.registrationid.toNumber(),\n            });\n\n            dispatch({\n              type: \"USERS_ID_FOR_INCOME\",\n              payload: val.registrationid.toNumber(),\n            });\n\n            dispatch({\n              type: \"LEVEL_REWARD\",\n              payload: tronweb.fromSun(val.LevelReward),\n            });\n            dispatch({\n              type: \"MATRIX_INCOME\",\n              payload: tronweb.fromSun(val.MatrixReward),\n            });\n            dispatch({\n              type: \"DIRECT_REFERRALS\",\n              payload: val.referredUsers.toNumber(),\n            });\n            dispatch({\n              type: \"LEVEL_INCOME\",\n              payload: tronweb.fromSun(val.LevelReward),\n            });\n\n            dispatch({\n              type:\"DIRECT_INCOME\",\n              payload:tronweb.fromSun(val.getdirects)\n            });\n\n            dispatch({\n              type:\"\",\n              payload:tronweb.fromSun(val.getdirects)\n            });\n\n          });\n\n        //contract\n        dispatch({\n          type: \"CONTRACT\",\n          payload: contract,\n        });\n\n        //tronweb\n        dispatch({\n          type: \"TRONWEB\",\n          payload: tronweb,\n        });\n\n        // business stations\n        for (let i = 1; i <= 7; i++) {\n          await contract\n            .getStationInfo(defaultAddress, i)\n            .call()\n            .then((val) => {\n              dispatch({\n                type: `STATION_${i}`,\n                payload: val[0],\n              });\n            });\n        }\n\n        //smart matrix\n\n        //smart level 1\n        await contract\n          .getStationInfo(defaultAddress, 8)\n          .call()\n          .then((val) => {\n            dispatch({\n              type: \"SMART_MATRIX_LEVEL_ONE\",\n              payload: val[0],\n            });\n          });\n\n        //smart level 2\n        await contract\n          .getStationInfo(defaultAddress, 9)\n          .call()\n          .then((val) => {\n            dispatch({\n              type: \"SMART_MATRIX_LEVEL_TWO\",\n              payload: val[0],\n            });\n          });\n\n        //silver matrix\n\n        //sliver level 1\n        await contract\n          .getStationInfo(defaultAddress, 10)\n          .call()\n          .then((val) => {\n            dispatch({\n              type: \"SILVER_MATRIX_LEVEL_ONE\",\n              payload: val[0],\n            });\n          });\n\n        //silver level 2\n        await contract\n          .getStationInfo(defaultAddress, 11)\n          .call()\n          .then((val) => {\n            dispatch({\n              type: \"SILVER_MATRIX_LEVEL_TWO\",\n              payload: val[0],\n            });\n          });\n\n        // gold matrix\n\n        //gold level 1\n        await contract\n          .getStationInfo(defaultAddress, 12)\n          .call()\n          .then((val) => {\n            dispatch({\n              type: \"GOLD_MATRIX_LEVEL_ONE\",\n              payload: val[0],\n            });\n          });\n\n        //gold level 2\n        await contract\n          .getStationInfo(defaultAddress, 13)\n          .call()\n          .then((val) => {\n            dispatch({\n              type: \"GOLD_MATRIX_LEVEL_TWO\",\n              payload: val[0],\n            });\n          });\n\n        // Royal matrix\n\n        //Royal level 1\n        await contract\n          .getStationInfo(defaultAddress, 14)\n          .call()\n          .then((val) => {\n            dispatch({\n              type: \"ROYAL_MATRIX_LEVEL_ONE\",\n              payload: val[0],\n            });\n          });\n\n        //Royal level 2\n        await contract\n          .getStationInfo(defaultAddress, 15)\n          .call()\n          .then((val) => {\n            dispatch({\n              type: \"ROYAL_MATRIX_LEVEL_TWO\",\n              payload: val[0],\n            });\n          });\n\n        // Crown matrix\n\n        //Crown level 1\n        await contract\n          .getStationInfo(defaultAddress, 16)\n          .call()\n          .then((val) => {\n            dispatch({\n              type: \"CROWN_MATRIX_LEVEL_ONE\",\n              payload: val[0],\n            });\n          });\n\n        //Crown level 2\n        await contract\n          .getStationInfo(defaultAddress, 17)\n          .call()\n          .then((val) => {\n            dispatch({\n              type: \"CROWN_MATRIX_LEVEL_TWO\",\n              payload: val[0],\n            });\n          });\n      });\n  }\n};\n\nexport const smartMatrixAction = () => async (dispatch, state) => {\n  const { contract, userWalletAddress, tronWeb } = state().UserReducer;\n  await contract\n    .SMARTMATRIX(userWalletAddress)\n    .send({\n      feeLimit: 100_000_000,\n      callValue: state().UserReducer.tronWeb.toSun(5000),\n    })\n    .then(() => {\n      dispatch(UserDataAction(tronWeb.defaultAddress.base58, tronWeb));\n    });\n};\n\nexport const smartMatrixLevel2Action = () => async (dispatch, state) => {\n  const { contract, userWalletAddress, tronWeb } = state().UserReducer;\n  await contract\n    .SMARTMATRIX2(userWalletAddress)\n    .send({\n      feeLimit: 100_000_000,\n      callValue: state().UserReducer.tronWeb.toSun(10000),\n    })\n    .then(() => {\n      dispatch(UserDataAction(tronWeb.defaultAddress.base58, tronWeb));\n    });\n};\n\nexport const silverMatrixAction = () => async (dispatch, state) => {\n  const { contract, userWalletAddress, tronWeb } = state().UserReducer;\n  await contract\n    .SILVERMATRIX(userWalletAddress)\n    .send({\n      feeLimit: 100_000_000,\n      callValue: state().UserReducer.tronWeb.toSun(50000),\n    })\n    .then(() => {\n      dispatch(UserDataAction(tronWeb.defaultAddress.base58, tronWeb));\n    });\n};\n\nexport const silverMatrixLevel2Action = () => async (dispatch, state) => {\n  const { contract, userWalletAddress, tronWeb } = state().UserReducer;\n  await contract\n    .SILVERMATRIX2(userWalletAddress)\n    .send({\n      feeLimit: 100_000_000,\n      callValue: state().UserReducer.tronWeb.toSun(100000),\n    })\n    .then(() => {\n      dispatch(UserDataAction(tronWeb.defaultAddress.base58, tronWeb));\n    });\n};\n\n\nexport const goldMatrixAction = () => async (dispatch, state) => {\n  const { contract, userWalletAddress, tronWeb } = state().UserReducer;\n  await contract\n    .GOLDMATRIX(userWalletAddress)\n    .send({\n      feeLimit: 100_000_000,\n      callValue: state().UserReducer.tronWeb.toSun(100000),\n    })\n    .then(() => {\n      dispatch(UserDataAction(tronWeb.defaultAddress.base58, tronWeb));\n    });\n};\n\nexport const goldMatrixLevel2Action = () => async (dispatch, state) => {\n  const { contract, userWalletAddress, tronWeb } = state().UserReducer;\n  await contract\n    .GOLDMATRIX2(userWalletAddress)\n    .send({\n      feeLimit: 100_000_000,\n      callValue: state().UserReducer.tronWeb.toSun(200000),\n    })\n    .then(() => {\n      dispatch(UserDataAction(tronWeb.defaultAddress.base58, tronWeb));\n    });\n};\n\nexport const royalMatrixAction = () => async (dispatch, state) => {\n  const { contract, userWalletAddress, tronWeb } = state().UserReducer;\n  await contract\n    .ROYALMATRIX(userWalletAddress)\n    .send({\n      feeLimit: 100_000_000,\n      callValue: state().UserReducer.tronWeb.toSun(500000),\n    })\n    .then(() => {\n      dispatch(UserDataAction(tronWeb.defaultAddress.base58, tronWeb));\n    });\n};\n\nexport const royalMatrixLevel2Action = () => async (dispatch, state) => {\n  const { contract, userWalletAddress, tronWeb } = state().UserReducer;\n  await contract\n    .ROYALMATRIX2(userWalletAddress)\n    .send({\n      feeLimit: 100_000_000,\n      callValue: state().UserReducer.tronWeb.toSun(1000000),\n    })\n    .then(() => {\n      dispatch(UserDataAction(tronWeb.defaultAddress.base58, tronWeb));\n    });\n};\n\nexport const crownMatrixAction = () => async (dispatch, state) => {\n  const { contract, userWalletAddress, tronWeb } = state().UserReducer;\n  await contract\n    .CROWNMATRIX(userWalletAddress)\n    .send({\n      feeLimit: 100_000_000,\n      callValue: state().UserReducer.tronWeb.toSun(5000000),\n    })\n    .then(() => {\n      dispatch(UserDataAction(tronWeb.defaultAddress.base58, tronWeb));\n    });\n};\n\nexport const crownMatrixLevel2Action = () => async (dispatch, state) => {\n  const { contract, userWalletAddress, tronWeb } = state().UserReducer;\n  await contract\n    .CROWNMATRIX2(userWalletAddress)\n    .send({\n      feeLimit: 100_000_000,\n      callValue: state().UserReducer.tronWeb.toSun(10000000),\n    })\n    .then(() => {\n      dispatch(UserDataAction(tronWeb.defaultAddress.base58, tronWeb));\n    });\n};\n\nexport const LogoutAction = () => async (dispatch) => {\n  dispatch({\n    type: \"LOGOUT\",\n  });\n  localStorage.removeItem(\"isAuth\");\n  localStorage.removeItem(\"clickedForView\");\n  window.location.reload();\n};\n"]},"metadata":{},"sourceType":"module"}